generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model Issue {
  id               Int        @id @default(autoincrement())
  title            String     @db.VarChar(255)
  description      String
  status           Status     @default(OPEN)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @default(now()) @updatedAt
  assignedToUserId String?    @db.VarChar(255)
  assignedToUser   User?      @relation(fields: [assignedToUserId], references: [id])
  Comment          Comment[]
  Workspace        Workspace? @relation(fields: [workspaceId], references: [id])
  workspaceId      String?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String       @id @default(cuid())
  name           String?
  email          String?      @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  assignedIssues Issue[]
  Comment        Comment[]
  Membership     Membership[]
  Invite         Invite[]
  Workspace      Workspace[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  issueId   Int
  authorId  String?

  issue  Issue @relation(fields: [issueId], references: [id], onDelete: Cascade)
  author User? @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  MEMBER
}

model Workspace {
  id          String       @id @default(cuid())
  name        String
  ownerId     String
  owner       User         @relation(fields: [ownerId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  memberships Membership[]
  issues      Issue[]
  Invite      Invite[]

  @@unique([name, ownerId])
}

model Membership {
  id          String @id @default(cuid())
  userId      String
  workspaceId String
  role        Role   @default(MEMBER)

  user      User      @relation(fields: [userId], references: [id])
  workspace Workspace @relation(fields: [workspaceId], references: [id])

  @@unique([userId, workspaceId])
}

model Invite {
  id          String    @id @default(cuid())
  email       String
  token       String    @unique
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  invitedById String
  invitedBy   User      @relation(fields: [invitedById], references: [id])
  createdAt   DateTime  @default(now())
  accepted    Boolean   @default(false)
}

enum Status {
  OPEN
  IN_PROGRESS
  CLOSED
}
